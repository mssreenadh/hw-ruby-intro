
Ruby intro part 1
  #sum
    should be defined
    returns correct sum [20 points]
    works on the empty array [10 points]
  #max_2_sum
    should be defined
    returns the correct sum [7 points]
    works even if 2 largest values are the same [3 points]
    returns zero if array is empty [10 points]
    returns value of the element if just one element [10 points]
  #sum_to_n
    should be defined
    returns true when any two elements sum to the second argument [30 points]
    returns false for any single element array [5 points]
    returns false for an empty array [5 points]

#hello
  should be defined
  The hello method returns the correct string [30 points] (FAILED - 1)

#starts_with_consonant?
  should be defined
  classifies true cases [10 points] (FAILED - 2)
  classifies false cases [10 points]
  works on the empty string [5 points]
  works on nonletters [5 points]

#binary_multiple_of_4?
  should be defined
  classifies valid binary numbers [30 points] (FAILED - 3)
  rejects invalid binary numbers [10 points]

BookInStock
  should be defined
  getters and setters
    should set ISBN [10 points] (FAILED - 4)
    should set price [10 points] (FAILED - 5)
    should be able to change ISBN [10 points] (FAILED - 6)
    should be able to change price [10 points] (FAILED - 7)
  constructor
    should reject invalid ISBN number [10 points]
    should reject zero price [10 points]
    should reject negative price [10 points]
  #price_as_string
    should be defined (FAILED - 8)
    should display 33.95 as "$33.95" [10 points] (FAILED - 9)
    should display 1.1 as $1.10 [10 points] (FAILED - 10)
    should display 20 as $20.00 [10 points] (FAILED - 11)

Failures:

  1) #hello The hello method returns the correct string [30 points]
     Failure/Error: expect(hello('Dan').class).to eq(String)

       expected: String
            got: NilClass

       (compared using ==)

       Diff:
       @@ -1,2 +1,2 @@
       -String
       +NilClass
     # ./spec/part2_spec.rb:11:in `block (2 levels) in <top (required)>'

  2) #starts_with_consonant? classifies true cases [10 points]
     Failure/Error: expect(starts_with_consonant?('v')).to be_truthy, "'v' is a consonant"
       'v' is a consonant
     # ./spec/part2_spec.rb:23:in `block (2 levels) in <top (required)>'

  3) #binary_multiple_of_4? classifies valid binary numbers [30 points]
     Failure/Error: expect(binary_multiple_of_4?(string)).to be_truthy,  "Incorrect results for input: \"#{string}\""
       Incorrect results for input: "1010101010100"
     # ./spec/part2_spec.rb:48:in `block (3 levels) in <top (required)>'
     # ./spec/part2_spec.rb:47:in `each'
     # ./spec/part2_spec.rb:47:in `block (2 levels) in <top (required)>'

  4) BookInStock getters and setters should set ISBN [10 points]
     Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

     ArgumentError:
       wrong number of arguments (given 2, expected 0)
     # ./spec/part3_spec.rb:11:in `initialize'
     # ./spec/part3_spec.rb:11:in `new'
     # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  5) BookInStock getters and setters should set price [10 points]
     Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

     ArgumentError:
       wrong number of arguments (given 2, expected 0)
     # ./spec/part3_spec.rb:11:in `initialize'
     # ./spec/part3_spec.rb:11:in `new'
     # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  6) BookInStock getters and setters should be able to change ISBN [10 points]
     Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

     ArgumentError:
       wrong number of arguments (given 2, expected 0)
     # ./spec/part3_spec.rb:11:in `initialize'
     # ./spec/part3_spec.rb:11:in `new'
     # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  7) BookInStock getters and setters should be able to change price [10 points]
     Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

     ArgumentError:
       wrong number of arguments (given 2, expected 0)
     # ./spec/part3_spec.rb:11:in `initialize'
     # ./spec/part3_spec.rb:11:in `new'
     # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  8) BookInStock #price_as_string should be defined
     Failure/Error: expect(BookInStock.new('isbn1', 10)).to respond_to(:price_as_string)

     ArgumentError:
       wrong number of arguments (given 2, expected 0)
     # ./spec/part3_spec.rb:40:in `initialize'
     # ./spec/part3_spec.rb:40:in `new'
     # ./spec/part3_spec.rb:40:in `block (3 levels) in <top (required)>'

  9) BookInStock #price_as_string should display 33.95 as "$33.95" [10 points]
     Failure/Error: expect(BookInStock.new('isbn11', 33.95).price_as_string).to eq('$33.95')

     ArgumentError:
       wrong number of arguments (given 2, expected 0)
     # ./spec/part3_spec.rb:43:in `initialize'
     # ./spec/part3_spec.rb:43:in `new'
     # ./spec/part3_spec.rb:43:in `block (3 levels) in <top (required)>'

  10) BookInStock #price_as_string should display 1.1 as $1.10 [10 points]
      Failure/Error: expect(BookInStock.new('isbn11', 1.1).price_as_string).to eq('$1.10')

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:46:in `initialize'
      # ./spec/part3_spec.rb:46:in `new'
      # ./spec/part3_spec.rb:46:in `block (3 levels) in <top (required)>'

  11) BookInStock #price_as_string should display 20 as $20.00 [10 points]
      Failure/Error: expect(BookInStock.new('isbn11', 20).price_as_string).to eq('$20.00')

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:49:in `initialize'
      # ./spec/part3_spec.rb:49:in `new'
      # ./spec/part3_spec.rb:49:in `block (3 levels) in <top (required)>'

Finished in 0.01782 seconds (files took 0.09285 seconds to load)
34 examples, 11 failures

Failed examples:

rspec ./spec/part2_spec.rb:10 # #hello The hello method returns the correct string [30 points]
rspec ./spec/part2_spec.rb:22 # #starts_with_consonant? classifies true cases [10 points]
rspec ./spec/part2_spec.rb:46 # #binary_multiple_of_4? classifies valid binary numbers [30 points]
rspec ./spec/part3_spec.rb:12 # BookInStock getters and setters should set ISBN [10 points]
rspec ./spec/part3_spec.rb:15 # BookInStock getters and setters should set price [10 points]
rspec ./spec/part3_spec.rb:18 # BookInStock getters and setters should be able to change ISBN [10 points]
rspec ./spec/part3_spec.rb:22 # BookInStock getters and setters should be able to change price [10 points]
rspec ./spec/part3_spec.rb:39 # BookInStock #price_as_string should be defined
rspec ./spec/part3_spec.rb:42 # BookInStock #price_as_string should display 33.95 as "$33.95" [10 points]
rspec ./spec/part3_spec.rb:45 # BookInStock #price_as_string should display 1.1 as $1.10 [10 points]
rspec ./spec/part3_spec.rb:48 # BookInStock #price_as_string should display 20 as $20.00 [10 points]

